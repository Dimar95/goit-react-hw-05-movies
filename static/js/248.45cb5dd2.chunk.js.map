{"version":3,"file":"static/js/248.45cb5dd2.chunk.js","mappings":"kRACA,EAAiC,sCAAjC,EAAkF,gCAAlF,EAA6H,gCAA7H,EAAwK,gCAAxK,EAAmN,gC,SCiHnN,EA3GsB,WAAO,IAAD,IAC1B,GAAoCA,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAcC,EAAAA,EAAAA,SAAO,GACrBC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BV,EAAAA,EAAAA,UAAS,IAArC,eAAOW,EAAP,KAAeC,EAAf,MACAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,IAAA,6CAE0CT,EAF1C,6DAIGU,MAAK,SAAAC,GAAO,OAAId,EAAcc,EAAQC,KAA1B,IACZC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,SAClBV,EAAU,SACVW,EAAAA,GAAAA,MAAA,UAAeJ,EAAMG,SAAW,CAC9BE,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,SAEV,GACJ,GAAE,CAAC3B,KACJ4B,EAAAA,EAAAA,UAAQ,WACN,GAAI1B,EAAY2B,QACd3B,EAAY2B,SAAU,MADxB,CAIA,IAAQC,EACNlC,EADMkC,YAAaC,EACnBnC,EADmBmC,MAAOC,EAC1BpC,EAD0BoC,aAAcC,EACxCrC,EADwCqC,aAAcC,EACtDtC,EADsDsC,OAAQC,EAC9DvC,EAD8DuC,SAE1DvB,GAAOwB,EAAAA,EAAAA,IAAOC,EAAAA,EAAAA,GAAML,EAAc,aAAc,IAAIM,MAAS,QACnEvC,EAAe,CACbwC,IAAKT,EAAW,0CACuBA,GACnC,oDACJU,KAAM5B,EACN6B,UAAWR,EACXC,OAAQA,EAAOQ,KAAI,SAAAC,GAAK,iBAAQA,EAAMC,KAAd,IACxBT,SAAAA,EACAJ,MAAAA,GAZD,CAcF,GAAE,CAACnC,EAAYM,IAChB,IAAM2C,EAAY,oBAAGzC,EAAS0C,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UACrCR,EAAkDzC,EAAlDyC,IAAKC,EAA6C1C,EAA7C0C,KAAMC,EAAuC3C,EAAvC2C,UAAWP,EAA4BpC,EAA5BoC,OAAQC,EAAoBrC,EAApBqC,SAAUJ,EAAUjC,EAAViC,MAChD,OACE,iCACE,SAAC,KAAD,CAAMiB,UAAWC,EAAcC,GAAIL,EAAnC,6BAIA,iBAAKG,UAAWC,EAAhB,WACE,0BACE,gBAAKD,UAAWC,EAAcE,IAAKZ,EAAKa,IAAKrB,OAE/C,4BACE,0BACGA,EADH,KACYS,EADZ,QAGA,wCAAgBC,MAChB,sCACA,uBAAIN,KACJ,oCACA,uBAAID,WAGR,4BACE,oDACA,gBAAIc,UAAWC,EAAf,WACE,SAAC,KAAD,CACED,UAAWC,EACXC,GAAG,OACHJ,MAAO,CAAEC,KAAMF,GAHjB,mBAOA,SAAC,KAAD,CACEG,UAAWC,EACXC,GAAG,UACHJ,MAAO,CAAEC,KAAMF,GAHjB,4BASJ,SAAC,KAAD,IACY,UAAXvC,IACC,SAAC,KAAD,CACEa,SAAS,aACTC,UAAW,IACXC,iBAAiB,EACjBgC,aAAa,EACb/B,cAAY,EACZgC,KAAK,EACLC,kBAAgB,EAChB/B,WAAS,EACTD,cAAY,EACZI,MAAM,YAKf,C","sources":["webpack://react-homework-template/./src/components/page/MoviesDetails/MoviesDetails.module.css?5d1f","components/page/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieContainer\":\"MoviesDetails_movieContainer__rdbiK\",\"linkBack\":\"MoviesDetails_linkBack__ayhPM\",\"imgMovie\":\"MoviesDetails_imgMovie__-fTe9\",\"linkList\":\"MoviesDetails_linkList__zQnDZ\",\"linkItem\":\"MoviesDetails_linkItem__n9yke\"};","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { useParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport axios from 'axios';\nimport { format, parse } from 'date-fns';\nimport css from './MoviesDetails.module.css';\nconst MoviesDetails = () => {\n  const [activMovie, setActivMovie] = useState('');\n  const [renderMovie, setRenderMovie] = useState('');\n  const { movieId } = useParams();\n  const firstRender = useRef(true);\n  const location = useLocation();\n  const [status, setStatus] = useState('');\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=0fe50c86842745b16f2f012241d0925e&language=en-US`\n      )\n      .then(results => setActivMovie(results.data))\n      .catch(error => {\n        console.log(error.message);\n        setStatus('error');\n        toast.error(`${error.message}`, {\n          position: 'top-center',\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: 'light',\n        });\n      });\n  }, [movieId]);\n  useMemo(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n    const { poster_path, title, release_date, vote_average, genres, overview } =\n      activMovie;\n    const data = format(parse(release_date, 'yyyy-mm-dd', new Date()), 'yyyy');\n    setRenderMovie({\n      img: poster_path\n        ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n        : 'https://full-hd.info/komediya/kenny-1/kenny-1.jpg',\n      date: data,\n      userScore: vote_average,\n      genres: genres.map(genre => ` ${genre.name}`),\n      overview,\n      title,\n    });\n  }, [activMovie, firstRender]);\n  const backLinkHref = location.state?.from ?? '/movies';\n  const { img, date, userScore, genres, overview, title } = renderMovie;\n  return (\n    <>\n      <Link className={css.linkBack} to={backLinkHref}>\n        Back to search\n      </Link>\n\n      <div className={css.movieContainer}>\n        <div>\n          <img className={css.imgMovie} src={img} alt={title} />\n        </div>\n        <div>\n          <h1>\n            {title} ({date})\n          </h1>\n          <p>User Score: {userScore}</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genres}</p>\n        </div>\n      </div>\n      <div>\n        <h3>Additional information</h3>\n        <ul className={css.linkList}>\n          <Link\n            className={css.linkItem}\n            to=\"cast\"\n            state={{ from: backLinkHref }}\n          >\n            Cast\n          </Link>\n          <Link\n            className={css.linkItem}\n            to=\"reviews\"\n            state={{ from: backLinkHref }}\n          >\n            Reviews\n          </Link>\n        </ul>\n      </div>\n      <Outlet />\n      {status === 'error' && (\n        <ToastContainer\n          position=\"top-center\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n          theme=\"light\"\n        />\n      )}\n    </>\n  );\n};\nexport default MoviesDetails;\n"],"names":["useState","activMovie","setActivMovie","renderMovie","setRenderMovie","movieId","useParams","firstRender","useRef","location","useLocation","status","setStatus","useEffect","axios","then","results","data","catch","error","console","log","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","useMemo","current","poster_path","title","release_date","vote_average","genres","overview","format","parse","Date","img","date","userScore","map","genre","name","backLinkHref","state","from","className","css","to","src","alt","newestOnTop","rtl","pauseOnFocusLoss"],"sourceRoot":""}